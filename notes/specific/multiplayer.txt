So, server. Server tracks everything.

Let's go through...
A player connects, and the server logs their connection. In order to join the game, the client must send a login packet with their username and version. If they match the server, then the server sends back a class with a player, and a level; the level contains all the chunks and tiles and data and entities, including the player. 

The hard part is making sure, then, that the client always has the right entities loaded. We'll have to check when mobs change chunks, and when they do, other players nearby will get updated.

How about this... These are the object types being sent:

- Login: game version and username
- ‎Level: a level instance that the client can literally set its own level instance equal to.
- ‎Player: a player object for the client to use; must be added to level manually (position already set)
- ‎Update: contains entity changes, tile changes, time of day, and maybe a few others. We should attempt to send this in bunches rather than individually... How about the update method returns the changes, as an object? Possible... Removals are also given.
- ‎Chunk: upon entering a new chunk, chunks that the player needs but doesn't have are sent over, including any entities on the chunks. Chunks that are unloaded aren't worried about at all.
- ‎Request: an action request, such as attack or interact. The server sends back any changes that happened as a result (in the next update?)

Note: the server keeps track of the player's active item, and stats. Maybe even inventory..? The player tells the server about its item, but the stats are changed by the server not the client.

Note: player updates may happen a lot, and they can update just about anything. They'll even do knockback and stuff... Just so the client doesn't have to worry about it. 





I have this idea where, when an interaction request is done, the server just sends back any updates that happened as a result, like with the updates every cycle. Then the clients can figure out the animations from there.
The key is that the "updates" will be objects that contain variables for all the possible updates for thst


Entity updates will be classes that contain 



Like, for the example, it might go like this:

player attacks, so the attack animation is played, and an attack request is sent to the server. Server responds with updates saying 





Integration is not a thing. Let's think of what I would want outside the bounds of what I currently have.

The game works by: interacting with other objects. Any changes must be recorded. After everything, changes are sent out to whoever wants them.

Darn, this is annoying... If only I could interact with things without having to worry about updating what has happened... Could I replicate what has happened? No, I can't, I have to do this harder... Ugh.

Or do I? If I used the same random numbers for mob movement and tile updates on the server and client, technically I should be able to do it...

That's generally bad practice, but if I could make it work, it would be awesome...

Oh. Lol. I forgot. Other players do things. Well, scrap that idea.

*Sigh* if you wanna have a good experience, and have it work well, you gotta add in those fixes and stuff.. I hope I can just make it look nice, though...

Actually, maybe I can make everything work off update packets... If all updates come in objects it'll be cool
Meh

I ought to limit packets sent. But I also don't want them to be too big.

I 